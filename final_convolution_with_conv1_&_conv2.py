# -*- coding: utf-8 -*-
"""Final- Convolution with conv1 & conv2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rmoRvc4NYDnz_JraCxY8ZmjVW45AZulm
"""

import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms
from torch.autograd import Variable
import torch.nn.functional as F

import matplotlib.pyplot as plt
import numpy as np

import sys
import warnings

if not sys.warnoptions:
    warnings.simplefilter("ignore")

"""**LOADING DATA**

Normalize a tensor image with mean and standard deviation. Given mean: (M1,...,Mn) and std: (S1,..,Sn) for n channels, this transform will normalize each channel of the input torch.*Tensor i.e. input[channel] = (input[channel] - mean[channel]) / std[channel]

Here we are using the **fashionMNIST dataset**
"""

transform  = transforms.Compose([transforms.ToTensor(),
                                        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

trainset = torchvision.datasets.FashionMNIST(root='./fashionMNIST/', train=True,
                                        download=True, transform=transform)


testset = torchvision.datasets.FashionMNIST(root='./fashionMNIST/', train=False,
                                       download=True, transform=transform)

print('The Length of Train set is : {} and of Test set is {}'.format(len(trainset), len(testset)))

"""# **Setting contraints like batch size, epochs, learning rate**"""

batch_size = 100
n_iters = 5500
num_epochs = n_iters / (len(trainset) / batch_size)
num_epochs = int(num_epochs)
learning_rate = 0.001

"""**class torch.utils.data.DataLoader(dataset, batch_size=1, shuffle=False, sampler=None, batch_sampler=None, num_workers=0, collate_fn=, pin_memory=False, drop_last=False, timeout=0, worker_init_fn=None)**

# **Data loader. Combines a dataset and a sampler, and provides single- or multi-process iterators over the dataset. **
"""

train_loader = torch.utils.data.DataLoader(dataset=trainset,
                                           batch_size=batch_size,
                                           shuffle=True)

test_loader = torch.utils.data.DataLoader(dataset=testset,
                                          batch_size=batch_size,
                                          shuffle=False)

"""# **Making Dictionary assigining label name to labels**"""

classes = {0 : 'T-Shirt/Top', 1 : 'Trouser', 2 : 'Pullover', 3 : 'Dress',
           4 : 'Coat', 5 : 'Sandal', 6 : 'Shirt', 7 : 'Sneaker', 8 : 'Bag',
           9 : 'Ankle boot'}

"""# **Some Plotting**"""

def imshow(image, label):
    plt.title(classes[label])
    plt.imshow(image.reshape(28, 28), cmap = 'Greys', interpolation = 'nearest')

fig = plt.figure(figsize=(10,10))
column = 5
row = 4

for num in range(0, 20):
    image, label = trainset.train_data[num], trainset.train_labels[num].item()
    num += 1
    fig.add_subplot(row, column, num)
    imshow(image, label)

"""# **Lets define our Convolutional Network**

We have three layer network with Two convolutional layer and One fully connected layer. The architecture for this follows as:


1.   Convolutional Layer Filter 5x5 with stride of 1 and padding of 2.
2.   Batch Normalization Layer Batch Normalization normalizes the output of a previous activation layer by subtracting the batch mean and dividing by the batch standard deviation.
3.   ReLU Layer
4.   Pool Layer Max pool of filter 2x2 and stride of 2

**Conv layer -->> Batch Norm Layer -->> ReLU non linearity -->> Max Pool layer -->> Conv layer -->> Batch Norm layer -->> ReLU Nonlinearity -->> Max Pool layer -->> Fully Connected layer**
"""

import torch
import torch.nn as nn
from torch.autograd import Variable
from torch.utils.data import DataLoader
from torchvision import datasets, transforms

# Define transforms for the input data
transform = transforms.Compose([
    transforms.ToTensor(),  # Convert PIL Image to tensor
    transforms.Normalize((0.5,), (0.5,))  # Normalize pixel values to range [-1, 1]
])

# Load MNIST dataset
train_dataset = datasets.MNIST(root='./data', train=True, transform=transform, download=True)
train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)

# Define the model
class ConvNet1(nn.Module):
    def __init__(self):
        super(ConvNet1, self).__init__()

        # Constraints for layer 1
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=16, kernel_size=5, stride=1, padding=2)
        self.batch1 = nn.BatchNorm2d(16)
        self.relu1 = nn.ReLU()
        self.pool1 = nn.MaxPool2d(kernel_size=2)

        # Constraints for layer 2
        self.conv2 = nn.Conv2d(in_channels=16, out_channels=32, kernel_size=5, stride=1, padding=2)
        self.batch2 = nn.BatchNorm2d(32)
        self.relu2 = nn.ReLU()
        self.pool2 = nn.MaxPool2d(kernel_size=2)

        # Defining the Linear layer
        self.fc = nn.Linear(32*7*7, 10)

    # defining the network flow
    def forward(self, x):
        # Conv 1
        out = self.conv1(x)
        out = self.batch1(out)
        out = self.relu1(out)

        # Max Pool 1
        out = self.pool1(out)

        # Conv 2
        out = self.conv2(out)
        out = self.batch2(out)
        out = self.relu2(out)

        # Max Pool 2
        out = self.pool2(out)

        out = out.view(out.size(0), -1)
        # Linear Layer
        out = self.fc(out)

        return out

model = ConvNet1()

model.parameters

"""# **Defining Loss Function and Optimizer**"""

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

"""# **Start training model**"""

losses = []

for epoch in range(5):  # Adjust the number of epochs as needed
    for i, (images, labels) in enumerate(train_loader):
        # Forward pass
        outputs = model(images)
        loss = criterion(outputs, labels)

        # Backward and optimize
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        losses.append(loss.item())

        if (i+1) % 100 == 0:
            print('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'.format(epoch+1, 5, i+1, len(train_loader), loss.item()))

"""losses = []

for epoch in range(num_epochs):
    for i, (images, labels) in enumerate(train_loader):
        images = Variable(images.float())
        labels = Variable(labels)

        # Forward pass
        outputs = model(images)
        loss = criterion(outputs, labels)

        # Backward pass and optimization
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        losses.append(loss.item())  # Track loss for later analysis

        if (i + 1) % 100 == 0:
            print('Epoch : {}/{}, Iter: {}/{}, Loss: {:.4f}'.format(
                epoch + 1, num_epochs, i + 1, len(train_loader), loss.item()))

# **Saving the model**

This will save only model parameters
"""

import os
import torch

# Create the 'model' directory if it doesn't exist
os.makedirs('./model', exist_ok=True)

# Assuming model is your defined model
model = ConvNet1()  # Assuming ConvNet1 is the name of your model class
# Your training code here...

# Save the model's state dictionary
torch.save(model.state_dict(), './model/convnet1.pt')

"""# **For Loading the model**"""

import os
import torch

# Create the 'model' directory if it doesn't exist
os.makedirs('./model', exist_ok=True)

# Assuming model is your defined model
model = ConvNet1()  # Assuming ConvNet1 is the name of your model class
# Your training code here...

# Save the model's state dictionary
torch.save(model.state_dict(), './model/convnet1.pt')

"""# **Evaluating the model**"""

import torch.nn as nn

class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=16, kernel_size=3, stride=1, padding=1)
        self.relu = nn.ReLU()
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.fc = nn.Linear(16 * 14 * 14, 10)  # Adjusted input size for fully connected layer

    def forward(self, x):
        x = self.conv1(x)
        x = self.relu(x)
        x = self.pool(x)
        x = x.view(x.size(0), -1)
        x = self.fc(x)
        return x

model = ConvNet()

"""# **Plotting Losses**"""

import matplotlib.pyplot as plt
loss = losses[0::100]
plt.xlabel('Epoches')
plt.ylabel('losses')
plt.title('Loss Curve per Epoches')
plt.plot(loss)
plt.show()

"""# **Done !!!!**"""